name: Coverage CI
on: [push, pull_request]

jobs:
  poetry:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash

    strategy:
      max-parallel: 42
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #       install & configure poetry
      #----------------------------------------------
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      #       install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --verbose --no-interaction --no-root

      #----------------------------------------------
      #       install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --verbose --no-interaction

      - run: docker compose -f docker-compose.db.yml build
      - run: docker compose -f docker-compose.db.yml down -v --remove-orphans
      - run: docker compose -f docker-compose.db.yml up -d

      #----------------------------------------------
      #       Test coverage
      #----------------------------------------------
      - name: Run tests and generate coverage
        run: |
          poetry run pytest backend/tests/
          # Uncomment when achieve sufficient coverage threshold
          poetry run coverage report -m

      - run: docker compose -f docker-compose.db.yml down -v --remove-orphans

      #----------------------------------------------
      #       Update codecov coverage
      #----------------------------------------------
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
