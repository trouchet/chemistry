  version: "3.9"

  services:
    db:
      image: postgres:17
      restart: always
      volumes:
        - ./postgres/docker-entrypoint-initdb.d/:/docker-entrypoint-initdb.d/
        - pgdata:/var/lib/postgresql/data:cached
      env_file:
        - .env
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
        - POSTGRES_USER=${POSTGRES_USER?Variable not set}
        - POSTGRES_DB=${POSTGRES_DB?Variable not set}

    adminer:
      image: adminer
      restart: always
      networks:
        - traefik-public
        - default
      depends_on:
        - db
      environment:
        - ADMINER_DESIGN=pepa-linha-dark
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-http.middlewares=https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-adminer-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-adminer.loadbalancer.server.port=8080

    backend:
      image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
      restart: always
      build:
        context: .
        dockerfile: ./Dockerfile
      depends_on:
        db:
          condition: service_healthy
      env_file: ".env"
      environment:
        - DOMAIN=${DOMAIN}
        - ENVIRONMENT=${ENVIRONMENT}
        - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
        - SECRET_KEY=${SECRET_KEY?Variable not set}
        - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
        - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
        - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
        - SMTP_HOST=${SMTP_HOST}
        - SMTP_USER=${SMTP_USER}
        - SMTP_PASSWORD=${SMTP_PASSWORD}
        - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
        - POSTGRES_SERVER=db
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER?Variable not set}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
        - SENTRY_DSN=${SENTRY_DSN}
      volumes:
        - ./app:/app

      networks:
        - traefik-public
        - default

    prometheus:
      image: prom/prometheus
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
        - prometheus-data:/prometheus
      ports:
        - "9090:9090"
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--web.enable-lifecycle'

  volumes:
    pgdata:
      driver: local
    prometheus-data:
      driver: local
    redis-data:
      driver: local

  networks:
    backend:
    traefik-public: